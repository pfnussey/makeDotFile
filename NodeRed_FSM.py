import json
import sys
from datetime import datetime

class NodeRed_FSM:
  """Encapsulates a JSON representation of a FSM for Node Red.."""
  def __init__(self, name, workingDirectory, inputfile):
    self.name = name
    self.data = ""
    self.FSM_as_Dict: dict = ""
    self.workingDir = workingDirectory
    self.inputDataFilename = inputfile
    self.dotFileName = ""

  def load_FSM_Definition(self):
    self.data = open(self.workingDir + self.inputDataFilename, "r")
    self.FSM_as_Dict = json.loads(self.data.read())

  def getFSM_as_dict(self):
    return self.FSM_as_Dict

  def printFSM(self):
    print("JSON formatted print of :", self.inputDataFilename, "\n", json.dumps(self.FSM_as_Dict, indent=4))

  def getDotFileName(self):
    return(self.dotFileName)

  def buildDotFile(self):
    #build the file name
    now = datetime.now()
    date = now.strftime("%Y%m%d")
    time = now.strftime("%H%M%S")
    #dotFileName = self.name + "_" + date + "_" + time + "_" + ".dot"
    self.dotFileName = self.name + "_" + date + ".dot"



    #extract and format the transitions
    transitions  = ""
    for k1, v1 in self.FSM_as_Dict["transitions"].items():
      for k2, v2 in v1.items():
        transitions = transitions + "\n" + k1 + " -> " + v2["status"] + " [label = \"" + k2 + "\"];"

    #Build the header info for the .dot file
    date = now.strftime("%d/%m/%Y")
    time = now.strftime("%H:%M:%S")
    title = self.name + ": script for rendering FSM diagram in Graphviz (.dot format)"
    newline = "\n"
    author = "Peter Nussey"
    programName = sys.argv[0]

    versionInfo = "Generated by " + programName + " " + time + " on " + date

    fileHeader = newline + title + newline + "Author: " + author + newline + versionInfo + newline

    layoutInfo = """digraph finite_state_machine {
	node [fontname="Helvetica,Arial,sans-serif", fontcolor=blue, fontsize=7]
	edge [fontname="Times-Italic", fontcolor=red, fontstyle=italic, fontsize=7, arrowsize=0.5]
	rankdir=LR;"""

    dotCommand = "dot file command line format: dot -Tpdf <inputfile>.dot -o <outputfile>.pdf"
    diagramFooterComment = "fontsize=8\nlabel = \"" + fileHeader +  dotCommand + "\""
    #print(diagramFooterComment)

    #Write the .dot file
    f = open(self.workingDir + self.dotFileName, "w")
    f.write("/*" + fileHeader + "*/" + newline + layoutInfo + newline + transitions + newline + diagramFooterComment + "\n}")
    f.close()
    print("Wrote to file: ", self.workingDir + self.dotFileName)